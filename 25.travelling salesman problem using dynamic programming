#include <stdio.h>
#include <limits.h>
#include <stdbool.h>

#define MAX 16 // Adjust based on the maximum number of cities

// Function to find the minimum cost of visiting all cities
int tsp(int dp[][MAX], int dist[MAX][MAX], int visited[], int pos, int n, int count, int cost, int ans) {
    if (count == n && dist[pos][0]) {
        return cost + dist[pos][0];
    }

    if (dp[pos][count] != -1) {
        return dp[pos][count];
    }

    int min = INT_MAX;

    for (int i = 0; i < n; i++) {
        if (!visited[i] && dist[pos][i]) {
            visited[i] = 1;
            int newCost = tsp(dp, dist, visited, i, n, count + 1, cost + dist[pos][i], min);
            if (newCost < min) {
                min = newCost;
            }
            visited[i] = 0;
        }
    }

    dp[pos][count] = min;
    return min;
}

int main() {
    int n;
    int dist[MAX][MAX]; // Distance matrix
    int dp[MAX][MAX];   // DP table
    int visited[MAX] = {0};

    // Input number of cities
    printf("Enter the number of cities: ");
    scanf("%d", &n);

    // Input distance matrix
    printf("Enter the distance matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &dist[i][j]);
        }
    }

    // Initialize DP table with -1
    for (int i = 0; i < MAX; i++) {
        for (int j = 0; j < MAX; j++) {
            dp[i][j] = -1;
        }
    }

    // Set the starting city
    visited[0] = 1;

    // Call the TSP function
    int result = tsp(dp, dist, visited, 0, n, 1, 0, INT_MAX);

    // Output the result
    printf("The minimum cost of the tour is: %d\n", result);

    return 0;
}
